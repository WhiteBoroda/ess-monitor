#include "tg.h"
#include "relay.h"
#include "types.h"
#include <FastBot.h>
#include <HardwareSerial.h>
#include <freertos/FreeRTOS.h>
#include <freertos/task.h>

extern Config Cfg;
extern volatile EssStatus Ess;

namespace TG {

typedef enum State : int {
  Undef = 0,
  Charging = 1,
  Discharging = 2,
  Balance = 3
} State;

FastBot bot;
State state = State::Undef;

void begin(uint8_t core, uint8_t priority);
void task(void *pvParameters);
void loop();
void onMessage(FB_msg &msg);
String getStatusMsg();

void begin(uint8_t core, uint8_t priority) {
  xTaskCreatePinnedToCore(task, "tg_task", 20000, NULL, priority, NULL, core);
}

void task(void *pvParameters) {
  Serial.printf("[TG] Task running in core %d.\n", (uint32_t)xPortGetCoreID());

  bot.setToken(Cfg.tgBotToken);
  bot.setChatID(Cfg.tgChatID);
  bot.setTextMode(FB_MARKDOWN);
  bot.attach(onMessage);

  vTaskDelay(1000 * 30 / portTICK_PERIOD_MS);

  while (1) {
    loop();
  }

  Serial.println("[TG] Task exited.");
  vTaskDelete(NULL);
}

void loop() {
  static int16_t previousCurrent = 0;
  static State previousState = State::Undef;
  static uint8_t previousBmsError = 0;
  static uint8_t previousBmsWarning = 0;
  static uint32_t previousMillis;
  uint32_t currentMillis = millis();

  // Every 5 seconds
  if (currentMillis - previousMillis >= 1000 * 5) {
    previousMillis = currentMillis;

    // Check for BMS errors and warnings
    if (Ess.bmsError != previousBmsError) {
      if (Ess.bmsError > 0) {
        String errorMsg = "üö® *–ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –ë–ê–¢–ê–†–ï–á!*\n\n";
        errorMsg += "‚ö†Ô∏è –ö–æ–¥ –ø–æ–º–∏–ª–∫–∏: *" + String(Ess.bmsError) + "*\n";
        errorMsg += "–ë–∞—Ç–∞—Ä–µ—è –º–æ–∂–µ –≤–∏–º–∫–Ω—É—Ç–∏—Å—è!\n\n";
        errorMsg += "–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω:\n";
        errorMsg += "üîã –ó–∞—Ä—è–¥: *" + String(Ess.charge) + "%*\n";
        errorMsg += "‚ö°Ô∏è –ù–∞–ø—Ä—É–≥–∞: *" + String(Ess.voltage, 2) + "V*\n";
        errorMsg += "üîå –°—Ç—Ä—É–º: *" + String(Ess.current, 1) + "A*\n";
        errorMsg += "üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: *" + String(Ess.temperature, 1) + "¬∞C*\n";
        bot.sendMessage(errorMsg);
      } else if (previousBmsError > 0) {
        // Error cleared
        bot.sendMessage("‚úÖ *–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –±–∞—Ç–∞—Ä–µ—ó —É—Å—É–Ω–µ–Ω–∞.*\n\n–ö–æ–¥ –ø–æ–º–∏–ª–∫–∏: " +
                        String(previousBmsError) + " ‚Üí 0");
      }
      previousBmsError = Ess.bmsError;
    }

    if (Ess.bmsWarning != previousBmsWarning) {
      if (Ess.bmsWarning > 0) {
        String warningMsg = "‚ö†Ô∏è *–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø –ë–ê–¢–ê–†–ï–á*\n\n";
        warningMsg += "–ö–æ–¥ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: *" + String(Ess.bmsWarning) + "*\n";
        warningMsg += "–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏: –≤–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –Ω–∞–ø—Ä—É–≥–∞ –∞–±–æ —Ä–æ–∑–±–∞–ª–∞–Ω—Å—É–≤–∞–Ω–Ω—è.\n\n";
        warningMsg += "–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω:\n";
        warningMsg += "üîã –ó–∞—Ä—è–¥: *" + String(Ess.charge) + "%*\n";
        warningMsg += "‚ö°Ô∏è –ù–∞–ø—Ä—É–≥–∞: *" + String(Ess.voltage, 2) + "V*\n";
        warningMsg += "üîå –°—Ç—Ä—É–º: *" + String(Ess.current, 1) + "A*\n";
        warningMsg += "üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: *" + String(Ess.temperature, 1) + "¬∞C*\n";
        bot.sendMessage(warningMsg);
      } else if (previousBmsWarning > 0) {
        // Warning cleared
        bot.sendMessage("‚úÖ *–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –±–∞—Ç–∞—Ä–µ—ó —É—Å—É–Ω–µ–Ω–µ.*\n\n–ö–æ–¥ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: " +
                        String(previousBmsWarning) + " ‚Üí 0");
      }
      previousBmsWarning = Ess.bmsWarning;
    }

    // Check for state changes
    if (Ess.current > (int)Cfg.tgCurrentThreshold) {
      state = State::Charging;
    } else if (Ess.current < -(int)Cfg.tgCurrentThreshold) {
      state = State::Discharging;
    } else {
      // Let's count current deviations in a tgCurrentThreshold range as a balanced state
      state = State::Balance;
    }

    if (state != previousState && previousState != State::Undef) {
      // The state has changed from one known value to another
      switch (state) {
      case State::Discharging:
        bot.sendMessage("üïØÔ∏è *–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –∂–∏–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –±–∞—Ç–∞—Ä–µ–π–∫–∏.* –ì—Ä–∏–ª—ñ –Ω–µ "
                        "—Å–º–∞–∂–∏–º–æ.\n\n||" +
                        getStatusMsg() + "||");
        break;
      case State::Charging:
        bot.sendMessage("üí° *–ï–ª–µ–∫—Ç—Ä–æ—Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ.*\n\n||" +
                        getStatusMsg() + "||");
        break;
      default:
        break;
      }
    }

    previousState = state;
  }

  bot.tick();
}

void onMessage(FB_msg &msg) {
#ifdef DEBUG
  Serial.println("[TG] Message received: " + msg.toString());
#endif

  if (msg.text == "/status" || msg.text.startsWith("/status@")) {
    bot.sendMessage(getStatusMsg(), msg.chatID);
  } else if (msg.text == "/restart" || msg.text.startsWith("/restart@")) {
    if (RELAY::isEnabled()) {
      bot.sendMessage("üîÑ *–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –±–∞—Ç–∞—Ä–µ—ó...*\n\n"
                      "–†–µ–ª–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –Ω–∞ " + String(Cfg.relayPulseMs) + "–º—Å.\n"
                      "–Ü–º—ñ—Ç–∞—Ü—ñ—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –≤–∫–ª—é—á–µ–Ω–Ω—è BMS.", msg.chatID);
      RELAY::triggerPulse();
      bot.sendMessage("‚úÖ *–Ü–º–ø—É–ª—å—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.*\n\n"
                      "–Ø–∫—â–æ –±–∞—Ç–∞—Ä–µ—è –Ω–µ –≤–≤—ñ–º–∫–Ω–µ—Ç—å—Å—è, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ:\n"
                      "‚Ä¢ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ä–µ–ª–µ –¥–æ –∫–Ω–æ–ø–∫–∏ BMS\n"
                      "‚Ä¢ –°—Ç–∞–Ω AUX Power Switch (–º–∞—î –±—É—Ç–∏ ON)\n"
                      "‚Ä¢ –°—Ç–∞–Ω Circuit Breaker\n\n"
                      "–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: BATTERY_RESTART_GUIDE.md", msg.chatID);
    } else {
      bot.sendMessage("‚ùå *–§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –≤–∏–º–∫–Ω–µ–Ω–∞.*\n\n"
                      "–©–æ–± —É–≤—ñ–º–∫–Ω—É—Ç–∏:\n"
                      "1. –ü—ñ–¥–ø–∞–π—Ç–µ —Ä–µ–ª–µ –¥–æ –∫–Ω–æ–ø–∫–∏ BMS\n"
                      "2. –ü—ñ–¥–∫–ª—é—á—ñ—Ç—å —Ä–µ–ª–µ –¥–æ GPIO ESP32\n"
                      "3. –£–≤—ñ–º–∫–Ω—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é —É –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ\n\n"
                      "–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: RELAY_INSTALLATION.md", msg.chatID);
    }
  }
}

String getStatusMsg() {
  String s;
  switch (state) {
  case State::Balance:
    s = "‚ö™Ô∏è –°—Ç–∞—Ç—É—Å: *–ø—Ä–æ—Å—Ç—ñ–π*.\n\n";
    break;
  case State::Charging:
    s = "üü¢ –°—Ç–∞—Ç—É—Å: *–∑–∞—Ä—è–¥–∂–∞–Ω–Ω—è*.\n\n";
    break;
  case State::Discharging:
    s = "üî¥ –°—Ç–∞—Ç—É—Å: *—Ä–æ–∑—Ä—è–¥–∂–∞–Ω–Ω—è*.\n\n";
    break;
  default:
    s = "üü° –°—Ç–∞—Ç—É—Å: *–Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π*.\n\n";
    break;
  }
  if (Ess.charge > 75) {
    s += "üü©üü©üü©üü©";
  } else if (Ess.charge > 50) {
    s += "üü©üü©üü©üü¶";
  } else if (Ess.charge > 25) {
    s += "üü©üü©üü¶üü¶";
  } else {
    s += "üü©üü¶üü¶üü¶";
  }
  s += " –ó–∞—Ä—è–¥: *" + String(Ess.charge) + "%*\n";
  s += "üîå –ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: *" + String(Ess.current, 1) + "A*\n";
  s += "‚ö°Ô∏è –ù–∞–ø—Ä—É–≥–∞: *" + String(Ess.voltage, 2) + "V*, –Ω–æ–º—ñ–Ω–∞–ª—å–Ω–∞: *" +
       String(Ess.ratedVoltage, 2) + "V*\n";
  s += "üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±–∞—Ç–∞—Ä–µ—ó: *" + String(Ess.temperature, 1) + "¬∞C*\n";
  s += "üçÄ –ó–¥–æ—Ä–æ–≤'—è –±–∞—Ç–∞—Ä–µ—ó: *" + String(Ess.health) + "%*\n";

  // BMS errors and warnings
  if (Ess.bmsError > 0 || Ess.bmsWarning > 0) {
    s += "\n‚ö†Ô∏è *–£–í–ê–ì–ê!*\n";
    if (Ess.bmsError > 0) {
      s += "üö® –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: *" + String(Ess.bmsError) + "*\n";
    }
    if (Ess.bmsWarning > 0) {
      s += "‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: *" + String(Ess.bmsWarning) + "*\n";
    }
  } else {
    s += "\n‚úÖ –ü–æ–º–∏–ª–æ–∫ –Ω–µ–º–∞—î\n";
  }

#ifdef DEBUG
  Serial.println(s);
#endif

  return s;
}

} // namespace TG
